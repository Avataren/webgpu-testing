use super::vertex::{v, Vertex};

pub fn cube_mesh() -> (Vec<Vertex>, Vec<u16>) {
    let p = |x, y, z| [x, y, z];
    let verts = vec![
        v(p(0.5, -0.5, -0.5), [1.0, 0.0, 0.0], [0.0, 1.0]),
        v(p(0.5, 0.5, -0.5), [1.0, 0.0, 0.0], [0.0, 0.0]),
        v(p(0.5, 0.5, 0.5), [1.0, 0.0, 0.0], [1.0, 0.0]),
        v(p(0.5, -0.5, 0.5), [1.0, 0.0, 0.0], [1.0, 1.0]),
        v(p(-0.5, -0.5, 0.5), [-1.0, 0.0, 0.0], [0.0, 1.0]),
        v(p(-0.5, 0.5, 0.5), [-1.0, 0.0, 0.0], [0.0, 0.0]),
        v(p(-0.5, 0.5, -0.5), [-1.0, 0.0, 0.0], [1.0, 0.0]),
        v(p(-0.5, -0.5, -0.5), [-1.0, 0.0, 0.0], [1.0, 1.0]),
        v(p(-0.5, 0.5, -0.5), [0.0, 1.0, 0.0], [0.0, 1.0]),
        v(p(-0.5, 0.5, 0.5), [0.0, 1.0, 0.0], [0.0, 0.0]),
        v(p(0.5, 0.5, 0.5), [0.0, 1.0, 0.0], [1.0, 0.0]),
        v(p(0.5, 0.5, -0.5), [0.0, 1.0, 0.0], [1.0, 1.0]),
        v(p(-0.5, -0.5, 0.5), [0.0, -1.0, 0.0], [0.0, 1.0]),
        v(p(-0.5, -0.5, -0.5), [0.0, -1.0, 0.0], [0.0, 0.0]),
        v(p(0.5, -0.5, -0.5), [0.0, -1.0, 0.0], [1.0, 0.0]),
        v(p(0.5, -0.5, 0.5), [0.0, -1.0, 0.0], [1.0, 1.0]),
        v(p(0.5, -0.5, 0.5), [0.0, 0.0, 1.0], [0.0, 1.0]),
        v(p(0.5, 0.5, 0.5), [0.0, 0.0, 1.0], [0.0, 0.0]),
        v(p(-0.5, 0.5, 0.5), [0.0, 0.0, 1.0], [1.0, 0.0]),
        v(p(-0.5, -0.5, 0.5), [0.0, 0.0, 1.0], [1.0, 1.0]),
        v(p(-0.5, -0.5, -0.5), [0.0, 0.0, -1.0], [0.0, 1.0]),
        v(p(-0.5, 0.5, -0.5), [0.0, 0.0, -1.0], [0.0, 0.0]),
        v(p(0.5, 0.5, -0.5), [0.0, 0.0, -1.0], [1.0, 0.0]),
        v(p(0.5, -0.5, -0.5), [0.0, 0.0, -1.0], [1.0, 1.0]),
    ];
    let idx = (0..6)
        .flat_map(|f| {
            let o = f * 4;
            [o, o + 1, o + 2, o, o + 2, o + 3]
        })
        .map(|i| i as u16)
        .collect::<Vec<_>>();
    (verts, idx)
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn cube_counts_look_right() {
        let (v, i) = cube_mesh();
        assert_eq!(v.len(), 24);
        assert_eq!(i.len(), 36);
    }
}
